// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tag.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addDocumentTag = `-- name: AddDocumentTag :exec
INSERT INTO document_tags (document_id, tag_id)
VALUES ($1, $2)
ON CONFLICT (document_id, tag_id) DO NOTHING
`

type AddDocumentTagParams struct {
	DocumentID uuid.UUID `json:"document_id"`
	TagID      uuid.UUID `json:"tag_id"`
}

func (q *Queries) AddDocumentTag(ctx context.Context, arg AddDocumentTagParams) error {
	_, err := q.db.ExecContext(ctx, addDocumentTag, arg.DocumentID, arg.TagID)
	return err
}

const createTag = `-- name: CreateTag :one
INSERT INTO tags (name) VALUES ($1)
ON CONFLICT (name) DO UPDATE SET name = EXCLUDED.name
RETURNING id, name, created_at
`

func (q *Queries) CreateTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getTagByName = `-- name: GetTagByName :one
SELECT id, name, created_at
FROM tags
WHERE name = $1
`

func (q *Queries) GetTagByName(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByName, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getTagsForDocument = `-- name: GetTagsForDocument :many
SELECT tags.id, tags.name, tags.created_at
FROM tags
JOIN document_tags ON tags.id = document_tags.tag_id
WHERE document_tags.document_id = $1
`

func (q *Queries) GetTagsForDocument(ctx context.Context, documentID uuid.UUID) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsForDocument, documentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT id, name, created_at
FROM tags
ORDER BY name ASC
`

func (q *Queries) ListTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeDocumentTag = `-- name: RemoveDocumentTag :exec
DELETE FROM document_tags
WHERE document_id = $1 AND tag_id = $2
`

type RemoveDocumentTagParams struct {
	DocumentID uuid.UUID `json:"document_id"`
	TagID      uuid.UUID `json:"tag_id"`
}

func (q *Queries) RemoveDocumentTag(ctx context.Context, arg RemoveDocumentTagParams) error {
	_, err := q.db.ExecContext(ctx, removeDocumentTag, arg.DocumentID, arg.TagID)
	return err
}
