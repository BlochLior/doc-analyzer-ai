// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: document.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO documents (
    title,
    content,
    summary,
    ai_model
) VALUES (
    $1, $2, $3, $4
) RETURNING id, title, content, summary, ai_model, created_at, updated_at
`

type CreateDocumentParams struct {
	Title   string         `json:"title"`
	Content string         `json:"content"`
	Summary string         `json:"summary"`
	AiModel sql.NullString `json:"ai_model"`
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, createDocument,
		arg.Title,
		arg.Content,
		arg.Summary,
		arg.AiModel,
	)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Summary,
		&i.AiModel,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDocument = `-- name: DeleteDocument :exec
DELETE FROM documents
WHERE id = $1
`

func (q *Queries) DeleteDocument(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDocument, id)
	return err
}

const getDocument = `-- name: GetDocument :one
SELECT id, title, content, summary, ai_model, created_at, updated_at
FROM documents
WHERE id = $1
`

func (q *Queries) GetDocument(ctx context.Context, id uuid.UUID) (Document, error) {
	row := q.db.QueryRowContext(ctx, getDocument, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Summary,
		&i.AiModel,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDocuments = `-- name: ListDocuments :many
SELECT id, title, content, summary, ai_model, created_at, updated_at
FROM documents
ORDER BY created_at DESC
`

func (q *Queries) ListDocuments(ctx context.Context) ([]Document, error) {
	rows, err := q.db.QueryContext(ctx, listDocuments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Summary,
			&i.AiModel,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDocument = `-- name: UpdateDocument :one
UPDATE documents
SET
    title = $2,
    content = $3,
    summary = $4,
    ai_model = $5,
    updated_at = NOW()
WHERE id = $1
RETURNING id, title, content, summary, ai_model, created_at, updated_at
`

type UpdateDocumentParams struct {
	ID      uuid.UUID      `json:"id"`
	Title   string         `json:"title"`
	Content string         `json:"content"`
	Summary string         `json:"summary"`
	AiModel sql.NullString `json:"ai_model"`
}

func (q *Queries) UpdateDocument(ctx context.Context, arg UpdateDocumentParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, updateDocument,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Summary,
		arg.AiModel,
	)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Summary,
		&i.AiModel,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
